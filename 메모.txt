db 변경할때마다 터미널에서 실행
 python manage.py migrate

테이블 정보 확인
mysql -u root -p
show databases;
use jining_db;
show tables;

1. 모든 테이블 변경 내역은 models.py에 작성
2. 수정된 내용을 기반으로 마이그레이션
3. 장고가 변경된 내역을 자동으로 기록하고 테이블에 반영

1. 테이블 지우고 모델에 해당 내용 정의하고 마이그레이션
2. inspectdb로 해당 테이블 내용 받아와서 모델에 작성 후 마이그레이션


from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class TblCustomer(models.Model):
    customer_email = models.CharField(primary_key=True, max_length=40)
    customer_name = models.CharField(max_length=20)
    customer_nickname = models.CharField(unique=True, max_length=20)

    class Meta:
        managed = False
        db_table = 'tbl_customer'


class TblOwner(models.Model):
    owner_email = models.CharField(db_column='Owner_email', primary_key=True,
                                   max_length=40)  # Field name made lowercase.
    owner_name = models.CharField(db_column='Owner_name', max_length=20)  # Field name made lowercase.
    owner_nickname = models.CharField(db_column='Owner_nickname', unique=True,
                                      max_length=20)  # Field name made lowercase.
    shop = models.ForeignKey('TblShop', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'tbl_owner'


class TblShop(models.Model):
    shop_id = models.AutoField(primary_key=True)
    shop_name = models.CharField(max_length=20)
    shop_site_x = models.CharField(max_length=30)
    shop_site_y = models.CharField(max_length=30)
    shop_review_grade = models.IntegerField()
    shop_review_number = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'tbl_shop'


class TblTaste(models.Model):
    shop = models.OneToOneField(TblShop, models.DO_NOTHING, primary_key=True)
    info1 = models.CharField(max_length=20)
    info2 = models.CharField(max_length=20)
    info3 = models.CharField(max_length=20)
    info4 = models.CharField(max_length=20)
    info5 = models.CharField(max_length=20)
    info6 = models.CharField(max_length=20)
    info7 = models.CharField(max_length=20)
    info8 = models.CharField(max_length=20)
    info9 = models.CharField(max_length=20)
    info10 = models.CharField(max_length=20)
    info11 = models.CharField(max_length=20)
    info12 = models.CharField(max_length=20)
    info13 = models.CharField(max_length=20)
    info14 = models.CharField(max_length=20)
    info15 = models.CharField(max_length=20)
    info16 = models.CharField(max_length=20)
    info17 = models.CharField(max_length=20)
    info18 = models.CharField(max_length=20)
    info19 = models.CharField(max_length=20)
    info20 = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'tbl_taste'


class TblTasteInfo(models.Model):
    tastekey = models.AutoField(db_column='tasteKey', primary_key=True)  # Field name made lowercase.
    tastevalue = models.CharField(db_column='tasteValue', max_length=20)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'tbl_taste_info'
